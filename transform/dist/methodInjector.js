"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MethodInjector = void 0;
const as_1 = require("visitor-as/as");
const visitor_as_1 = require("visitor-as");
const utils_1 = require("visitor-as/dist/utils");
function getTypeName(type) {
    let _type = utils_1.getName(type);
    const OR_NULL = /\|.*null/;
    if (type.isNullable && !OR_NULL.test(_type)) {
        _type = `${_type} | null`;
    }
    return _type;
}
function isField(node) {
    return node.kind == as_1.NodeKind.FIELDDECLARATION;
}
class MethodInjector extends visitor_as_1.BaseVisitor {
    visitFieldDeclaration(node) {
        const name = utils_1.toString(node.name);
        if (!node.type) {
            throw new Error(`Field ${name} is missing a type declaration`);
        }
        const _type = getTypeName(node.type);
        this.encodeStmts.push(`encoder.encode_field<${_type}>("${name}", this.${name})`);
        this.decodeStmts.push(`this.${name} = decoder.decode_field<${_type}>("${name}")`);
    }
    visitClassDeclaration(node) {
        const fields = node.members.filter(isField);
        if (!fields) {
            return;
        }
        this.encodeStmts = [];
        this.decodeStmts = [];
        super.visit(fields);
        const encodeMethod = `
    encode<__T>(encoder: __T): void {
      ${node.extendsType != null ? "super.encode<__T>(encoder);" : ""}
      ${this.encodeStmts.join(";\n\t")};
    }
    `;
        const decodeMethod = `
    decode<__T>(decoder: __T): void {
      ${node.extendsType != null ? "super.decode(decoder);" : ""}
      ${this.decodeStmts.join(";\n\t")};
    }
    `;
        if (!node.members.some(utils_1.isMethodNamed("encode"))) {
            const encodeMember = visitor_as_1.SimpleParser.parseClassMember(encodeMethod, node);
            node.members.push(encodeMember);
        }
        if (!node.members.some(utils_1.isMethodNamed("decode"))) {
            const decodeMember = visitor_as_1.SimpleParser.parseClassMember(decodeMethod, node);
            node.members.push(decodeMember);
        }
    }
    static visit(node) {
        (new MethodInjector()).visit(node);
    }
}
exports.MethodInjector = MethodInjector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0aG9kSW5qZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbWV0aG9kSW5qZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsc0NBQTZHO0FBQzdHLDJDQUF1RDtBQUN2RCxpREFBeUU7QUFHekUsU0FBUyxXQUFXLENBQUMsSUFBYztJQUNqQyxJQUFJLEtBQUssR0FBRyxlQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDO0lBQzNCLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDM0MsS0FBSyxHQUFHLEdBQUcsS0FBSyxTQUFTLENBQUM7S0FDM0I7SUFDRCxPQUFPLEtBQUssQ0FBQTtBQUNkLENBQUM7QUFHRCxTQUFTLE9BQU8sQ0FBQyxJQUEwQjtJQUN6QyxPQUFPLElBQUksQ0FBQyxJQUFJLElBQUksYUFBUSxDQUFDLGdCQUFnQixDQUFDO0FBQ2hELENBQUM7QUFFRCxNQUFhLGNBQWUsU0FBUSx3QkFBVztJQUk3QyxxQkFBcUIsQ0FBQyxJQUFzQjtRQUMxQyxNQUFNLElBQUksR0FBRyxnQkFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsU0FBUyxJQUFJLGdDQUFnQyxDQUFDLENBQUM7U0FDaEU7UUFFRCxNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXJDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLHdCQUF3QixLQUFLLE1BQU0sSUFBSSxXQUFXLElBQUksR0FBRyxDQUFDLENBQUM7UUFDakYsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLDJCQUEyQixLQUFLLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQztJQUNwRixDQUFDO0lBRUQscUJBQXFCLENBQUMsSUFBc0I7UUFDMUMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFNUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFcEIsTUFBTSxZQUFZLEdBQUc7O1FBRWpCLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUM3RCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7O0tBRWpDLENBQUE7UUFDRCxNQUFNLFlBQVksR0FBRzs7UUFFakIsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3hELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQzs7S0FFakMsQ0FBQTtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxxQkFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUU7WUFDL0MsTUFBTSxZQUFZLEdBQUcseUJBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdkUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDakM7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMscUJBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFO1lBQy9DLE1BQU0sWUFBWSxHQUFHLHlCQUFZLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3ZFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBc0I7UUFDakMsQ0FBQyxJQUFJLGNBQWMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Q0FFRjtBQXJERCx3Q0FxREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUeXBlTm9kZSwgQ2xhc3NEZWNsYXJhdGlvbiwgRmllbGREZWNsYXJhdGlvbiwgTm9kZUtpbmQsIERlY2xhcmF0aW9uU3RhdGVtZW50IH0gZnJvbSBcInZpc2l0b3ItYXMvYXNcIjtcbmltcG9ydCB7IFNpbXBsZVBhcnNlciwgQmFzZVZpc2l0b3IgfSBmcm9tIFwidmlzaXRvci1hc1wiO1xuaW1wb3J0IHsgdG9TdHJpbmcsIGlzTWV0aG9kTmFtZWQsIGdldE5hbWUgfSBmcm9tICd2aXNpdG9yLWFzL2Rpc3QvdXRpbHMnO1xuXG5cbmZ1bmN0aW9uIGdldFR5cGVOYW1lKHR5cGU6IFR5cGVOb2RlKTogc3RyaW5nIHtcbiAgbGV0IF90eXBlID0gZ2V0TmFtZSh0eXBlKTtcbiAgY29uc3QgT1JfTlVMTCA9IC9cXHwuKm51bGwvO1xuICBpZiAodHlwZS5pc051bGxhYmxlICYmICFPUl9OVUxMLnRlc3QoX3R5cGUpKSB7XG4gICAgX3R5cGUgPSBgJHtfdHlwZX0gfCBudWxsYDtcbiAgfVxuICByZXR1cm4gX3R5cGVcbn1cblxuXG5mdW5jdGlvbiBpc0ZpZWxkKG5vZGU6IERlY2xhcmF0aW9uU3RhdGVtZW50KTogYm9vbGVhbiB7XG4gIHJldHVybiBub2RlLmtpbmQgPT0gTm9kZUtpbmQuRklFTERERUNMQVJBVElPTjtcbn1cblxuZXhwb3J0IGNsYXNzIE1ldGhvZEluamVjdG9yIGV4dGVuZHMgQmFzZVZpc2l0b3Ige1xuICBlbmNvZGVTdG10czogc3RyaW5nW107XG4gIGRlY29kZVN0bXRzOiBzdHJpbmdbXTtcblxuICB2aXNpdEZpZWxkRGVjbGFyYXRpb24obm9kZTogRmllbGREZWNsYXJhdGlvbik6IHZvaWQge1xuICAgIGNvbnN0IG5hbWUgPSB0b1N0cmluZyhub2RlLm5hbWUpO1xuICAgIGlmICghbm9kZS50eXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpZWxkICR7bmFtZX0gaXMgbWlzc2luZyBhIHR5cGUgZGVjbGFyYXRpb25gKTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgX3R5cGUgPSBnZXRUeXBlTmFtZShub2RlLnR5cGUpO1xuICAgIFxuICAgIHRoaXMuZW5jb2RlU3RtdHMucHVzaChgZW5jb2Rlci5lbmNvZGVfZmllbGQ8JHtfdHlwZX0+KFwiJHtuYW1lfVwiLCB0aGlzLiR7bmFtZX0pYCk7XG4gICAgdGhpcy5kZWNvZGVTdG10cy5wdXNoKGB0aGlzLiR7bmFtZX0gPSBkZWNvZGVyLmRlY29kZV9maWVsZDwke190eXBlfT4oXCIke25hbWV9XCIpYCk7XG4gIH1cblxuICB2aXNpdENsYXNzRGVjbGFyYXRpb24obm9kZTogQ2xhc3NEZWNsYXJhdGlvbik6IHZvaWQge1xuICAgIGNvbnN0IGZpZWxkcyA9IG5vZGUubWVtYmVycy5maWx0ZXIoaXNGaWVsZCk7XG5cbiAgICBpZiAoIWZpZWxkcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZW5jb2RlU3RtdHMgPSBbXTtcbiAgICB0aGlzLmRlY29kZVN0bXRzID0gW107XG4gICAgc3VwZXIudmlzaXQoZmllbGRzKTtcblxuICAgIGNvbnN0IGVuY29kZU1ldGhvZCA9IGBcbiAgICBlbmNvZGU8X19UPihlbmNvZGVyOiBfX1QpOiB2b2lkIHtcbiAgICAgICR7bm9kZS5leHRlbmRzVHlwZSAhPSBudWxsID8gXCJzdXBlci5lbmNvZGU8X19UPihlbmNvZGVyKTtcIiA6IFwiXCJ9XG4gICAgICAke3RoaXMuZW5jb2RlU3RtdHMuam9pbihcIjtcXG5cXHRcIil9O1xuICAgIH1cbiAgICBgXG4gICAgY29uc3QgZGVjb2RlTWV0aG9kID0gYFxuICAgIGRlY29kZTxfX1Q+KGRlY29kZXI6IF9fVCk6IHZvaWQge1xuICAgICAgJHtub2RlLmV4dGVuZHNUeXBlICE9IG51bGwgPyBcInN1cGVyLmRlY29kZShkZWNvZGVyKTtcIiA6IFwiXCJ9XG4gICAgICAke3RoaXMuZGVjb2RlU3RtdHMuam9pbihcIjtcXG5cXHRcIil9O1xuICAgIH1cbiAgICBgXG4gICAgaWYgKCFub2RlLm1lbWJlcnMuc29tZShpc01ldGhvZE5hbWVkKFwiZW5jb2RlXCIpKSkgeyBcbiAgICAgIGNvbnN0IGVuY29kZU1lbWJlciA9IFNpbXBsZVBhcnNlci5wYXJzZUNsYXNzTWVtYmVyKGVuY29kZU1ldGhvZCwgbm9kZSk7XG4gICAgICBub2RlLm1lbWJlcnMucHVzaChlbmNvZGVNZW1iZXIpO1xuICAgIH1cbiAgICBpZiAoIW5vZGUubWVtYmVycy5zb21lKGlzTWV0aG9kTmFtZWQoXCJkZWNvZGVcIikpKSB7IFxuICAgICAgY29uc3QgZGVjb2RlTWVtYmVyID0gU2ltcGxlUGFyc2VyLnBhcnNlQ2xhc3NNZW1iZXIoZGVjb2RlTWV0aG9kLCBub2RlKTtcbiAgICAgIG5vZGUubWVtYmVycy5wdXNoKGRlY29kZU1lbWJlcik7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHZpc2l0KG5vZGU6IENsYXNzRGVjbGFyYXRpb24pOiB2b2lkIHtcbiAgICAobmV3IE1ldGhvZEluamVjdG9yKCkpLnZpc2l0KG5vZGUpO1xuICB9XG5cbn1cbiJdfQ==