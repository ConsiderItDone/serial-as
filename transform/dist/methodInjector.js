"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MethodInjector = void 0;
const as_1 = require("visitor-as/as");
const visitor_as_1 = require("visitor-as");
const utils_1 = require("visitor-as/dist/utils");
function getTypeName(type) {
    let _type = utils_1.getName(type);
    const OR_NULL = /\|.*null/;
    if (type.isNullable && !OR_NULL.test(_type)) {
        _type = `${_type} | null`;
    }
    return _type;
}
function isField(node) {
    return node.kind == as_1.NodeKind.FIELDDECLARATION;
}
class MethodInjector extends visitor_as_1.BaseVisitor {
    visitFieldDeclaration(node) {
        const name = utils_1.toString(node.name);
        if (!node.type) {
            throw new Error(`Field ${name} is missing a type declaration`);
        }
        const _type = getTypeName(node.type);
        this.encodeStmts.push(`encoder.encode_field<${_type}>("${name}", this.${name})`);
        let defaultValue = node.initializer ? `, ${utils_1.toString(node.initializer)}` : "";
        this.decodeStmts.push(`this.${name} = decoder.decode_field<${_type}>("${name}"${defaultValue})`);
    }
    visitClassDeclaration(node) {
        const fields = node.members.filter(isField);
        if (!fields) {
            return;
        }
        this.encodeStmts = [];
        this.decodeStmts = [];
        super.visit(fields);
        const encodeMethod = `
    encode<__T>(encoder: __T): void {
      ${node.extendsType != null ? "super.encode<__T>(encoder);" : ""}
      ${this.encodeStmts.join(";\n\t")};
    }
    `;
        const decodeMethod = `
    decode<__T>(decoder: __T): void {
      ${node.extendsType != null ? "super.decode(decoder);" : ""}
      ${this.decodeStmts.join(";\n\t")};
    }
    `;
        if (!node.members.some(utils_1.isMethodNamed("encode"))) {
            const encodeMember = visitor_as_1.SimpleParser.parseClassMember(encodeMethod, node);
            node.members.push(encodeMember);
        }
        if (!node.members.some(utils_1.isMethodNamed("decode"))) {
            const decodeMember = visitor_as_1.SimpleParser.parseClassMember(decodeMethod, node);
            node.members.push(decodeMember);
        }
    }
    static visit(node) {
        (new MethodInjector()).visit(node);
    }
}
exports.MethodInjector = MethodInjector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0aG9kSW5qZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbWV0aG9kSW5qZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsc0NBQTZHO0FBQzdHLDJDQUF1RDtBQUN2RCxpREFBeUU7QUFHekUsU0FBUyxXQUFXLENBQUMsSUFBYztJQUNqQyxJQUFJLEtBQUssR0FBRyxlQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDO0lBQzNCLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDM0MsS0FBSyxHQUFHLEdBQUcsS0FBSyxTQUFTLENBQUM7S0FDM0I7SUFDRCxPQUFPLEtBQUssQ0FBQTtBQUNkLENBQUM7QUFHRCxTQUFTLE9BQU8sQ0FBQyxJQUEwQjtJQUN6QyxPQUFPLElBQUksQ0FBQyxJQUFJLElBQUksYUFBUSxDQUFDLGdCQUFnQixDQUFDO0FBQ2hELENBQUM7QUFFRCxNQUFhLGNBQWUsU0FBUSx3QkFBVztJQUk3QyxxQkFBcUIsQ0FBQyxJQUFzQjtRQUMxQyxNQUFNLElBQUksR0FBRyxnQkFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsU0FBUyxJQUFJLGdDQUFnQyxDQUFDLENBQUM7U0FDaEU7UUFFRCxNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXJDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLHdCQUF3QixLQUFLLE1BQU0sSUFBSSxXQUFXLElBQUksR0FBRyxDQUFDLENBQUM7UUFFakYsSUFBSSxZQUFZLEdBQVcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxnQkFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDcEYsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLDJCQUEyQixLQUFLLE1BQU0sSUFBSSxJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7SUFDbkcsQ0FBQztJQUVELHFCQUFxQixDQUFDLElBQXNCO1FBQzFDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTVDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUN0QixLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXBCLE1BQU0sWUFBWSxHQUFHOztRQUVqQixJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDN0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDOztLQUVqQyxDQUFBO1FBQ0QsTUFBTSxZQUFZLEdBQUc7O1FBRWpCLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUN4RCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7O0tBRWpDLENBQUE7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMscUJBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFO1lBQy9DLE1BQU0sWUFBWSxHQUFHLHlCQUFZLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3ZFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2pDO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLHFCQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRTtZQUMvQyxNQUFNLFlBQVksR0FBRyx5QkFBWSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN2RSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNqQztJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDLElBQXNCO1FBQ2pDLENBQUMsSUFBSSxjQUFjLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDO0NBRUY7QUF2REQsd0NBdURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZU5vZGUsIENsYXNzRGVjbGFyYXRpb24sIEZpZWxkRGVjbGFyYXRpb24sIE5vZGVLaW5kLCBEZWNsYXJhdGlvblN0YXRlbWVudCB9IGZyb20gXCJ2aXNpdG9yLWFzL2FzXCI7XG5pbXBvcnQgeyBTaW1wbGVQYXJzZXIsIEJhc2VWaXNpdG9yIH0gZnJvbSBcInZpc2l0b3ItYXNcIjtcbmltcG9ydCB7IHRvU3RyaW5nLCBpc01ldGhvZE5hbWVkLCBnZXROYW1lIH0gZnJvbSAndmlzaXRvci1hcy9kaXN0L3V0aWxzJztcblxuXG5mdW5jdGlvbiBnZXRUeXBlTmFtZSh0eXBlOiBUeXBlTm9kZSk6IHN0cmluZyB7XG4gIGxldCBfdHlwZSA9IGdldE5hbWUodHlwZSk7XG4gIGNvbnN0IE9SX05VTEwgPSAvXFx8LipudWxsLztcbiAgaWYgKHR5cGUuaXNOdWxsYWJsZSAmJiAhT1JfTlVMTC50ZXN0KF90eXBlKSkge1xuICAgIF90eXBlID0gYCR7X3R5cGV9IHwgbnVsbGA7XG4gIH1cbiAgcmV0dXJuIF90eXBlXG59XG5cblxuZnVuY3Rpb24gaXNGaWVsZChub2RlOiBEZWNsYXJhdGlvblN0YXRlbWVudCk6IGJvb2xlYW4ge1xuICByZXR1cm4gbm9kZS5raW5kID09IE5vZGVLaW5kLkZJRUxEREVDTEFSQVRJT047XG59XG5cbmV4cG9ydCBjbGFzcyBNZXRob2RJbmplY3RvciBleHRlbmRzIEJhc2VWaXNpdG9yIHtcbiAgZW5jb2RlU3RtdHM6IHN0cmluZ1tdO1xuICBkZWNvZGVTdG10czogc3RyaW5nW107XG5cbiAgdmlzaXRGaWVsZERlY2xhcmF0aW9uKG5vZGU6IEZpZWxkRGVjbGFyYXRpb24pOiB2b2lkIHtcbiAgICBjb25zdCBuYW1lID0gdG9TdHJpbmcobm9kZS5uYW1lKTtcbiAgICBpZiAoIW5vZGUudHlwZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGaWVsZCAke25hbWV9IGlzIG1pc3NpbmcgYSB0eXBlIGRlY2xhcmF0aW9uYCk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IF90eXBlID0gZ2V0VHlwZU5hbWUobm9kZS50eXBlKTtcbiAgICBcbiAgICB0aGlzLmVuY29kZVN0bXRzLnB1c2goYGVuY29kZXIuZW5jb2RlX2ZpZWxkPCR7X3R5cGV9PihcIiR7bmFtZX1cIiwgdGhpcy4ke25hbWV9KWApO1xuICAgIFxuICAgIGxldCBkZWZhdWx0VmFsdWU6IHN0cmluZyA9IG5vZGUuaW5pdGlhbGl6ZXIgPyBgLCAke3RvU3RyaW5nKG5vZGUuaW5pdGlhbGl6ZXIpfWA6IFwiXCI7XG4gICAgdGhpcy5kZWNvZGVTdG10cy5wdXNoKGB0aGlzLiR7bmFtZX0gPSBkZWNvZGVyLmRlY29kZV9maWVsZDwke190eXBlfT4oXCIke25hbWV9XCIke2RlZmF1bHRWYWx1ZX0pYCk7XG4gIH1cblxuICB2aXNpdENsYXNzRGVjbGFyYXRpb24obm9kZTogQ2xhc3NEZWNsYXJhdGlvbik6IHZvaWQge1xuICAgIGNvbnN0IGZpZWxkcyA9IG5vZGUubWVtYmVycy5maWx0ZXIoaXNGaWVsZCk7XG5cbiAgICBpZiAoIWZpZWxkcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZW5jb2RlU3RtdHMgPSBbXTtcbiAgICB0aGlzLmRlY29kZVN0bXRzID0gW107XG4gICAgc3VwZXIudmlzaXQoZmllbGRzKTtcblxuICAgIGNvbnN0IGVuY29kZU1ldGhvZCA9IGBcbiAgICBlbmNvZGU8X19UPihlbmNvZGVyOiBfX1QpOiB2b2lkIHtcbiAgICAgICR7bm9kZS5leHRlbmRzVHlwZSAhPSBudWxsID8gXCJzdXBlci5lbmNvZGU8X19UPihlbmNvZGVyKTtcIiA6IFwiXCJ9XG4gICAgICAke3RoaXMuZW5jb2RlU3RtdHMuam9pbihcIjtcXG5cXHRcIil9O1xuICAgIH1cbiAgICBgXG4gICAgY29uc3QgZGVjb2RlTWV0aG9kID0gYFxuICAgIGRlY29kZTxfX1Q+KGRlY29kZXI6IF9fVCk6IHZvaWQge1xuICAgICAgJHtub2RlLmV4dGVuZHNUeXBlICE9IG51bGwgPyBcInN1cGVyLmRlY29kZShkZWNvZGVyKTtcIiA6IFwiXCJ9XG4gICAgICAke3RoaXMuZGVjb2RlU3RtdHMuam9pbihcIjtcXG5cXHRcIil9O1xuICAgIH1cbiAgICBgXG4gICAgaWYgKCFub2RlLm1lbWJlcnMuc29tZShpc01ldGhvZE5hbWVkKFwiZW5jb2RlXCIpKSkgeyBcbiAgICAgIGNvbnN0IGVuY29kZU1lbWJlciA9IFNpbXBsZVBhcnNlci5wYXJzZUNsYXNzTWVtYmVyKGVuY29kZU1ldGhvZCwgbm9kZSk7XG4gICAgICBub2RlLm1lbWJlcnMucHVzaChlbmNvZGVNZW1iZXIpO1xuICAgIH1cbiAgICBpZiAoIW5vZGUubWVtYmVycy5zb21lKGlzTWV0aG9kTmFtZWQoXCJkZWNvZGVcIikpKSB7IFxuICAgICAgY29uc3QgZGVjb2RlTWVtYmVyID0gU2ltcGxlUGFyc2VyLnBhcnNlQ2xhc3NNZW1iZXIoZGVjb2RlTWV0aG9kLCBub2RlKTtcbiAgICAgIG5vZGUubWVtYmVycy5wdXNoKGRlY29kZU1lbWJlcik7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHZpc2l0KG5vZGU6IENsYXNzRGVjbGFyYXRpb24pOiB2b2lkIHtcbiAgICAobmV3IE1ldGhvZEluamVjdG9yKCkpLnZpc2l0KG5vZGUpO1xuICB9XG5cbn1cbiJdfQ==