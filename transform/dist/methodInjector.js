"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MethodInjector = void 0;
const as_1 = require("visitor-as/as");
const visitor_as_1 = require("visitor-as");
const utils_1 = require("visitor-as/dist/utils");
const utils_2 = require("./utils");
function getTypeName(type) {
    let _type = utils_1.getName(type);
    const OR_NULL = /\|.*null/;
    if (type.isNullable && !OR_NULL.test(_type)) {
        _type = `${_type} | null`;
    }
    return _type;
}
function isField(node) {
    return node.kind == as_1.NodeKind.FIELDDECLARATION;
}
function isInstanceField(node) {
    return isField(node) && node.is(as_1.CommonFlags.INSTANCE);
}
class MethodInjector extends visitor_as_1.BaseVisitor {
    visitFieldDeclaration(node) {
        const name = utils_1.toString(node.name);
        if (!node.type) {
            throw new Error(`Field ${name} is missing a type declaration  for ${utils_1.toString(this.currentClass)}`);
        }
        const _type = getTypeName(node.type);
        this.encodeStmts.push(`encoder.encode_field<${_type}>("${name}", this.${name})`);
        let defaultValue = node.initializer ? `, ${utils_1.toString(node.initializer)}` : "";
        this.decodeStmts.push(`this.${name} = decoder.decode_field<${_type}>("${name}"${defaultValue})`);
    }
    visitClassDeclaration(node) {
        console.log(`${utils_1.getName(node)}`);
        if (utils_2.isStdlib(node)) {
            return;
        }
        const fields = node.members.filter(isInstanceField);
        if (!fields) {
            return;
        }
        this.currentClass = node;
        this.encodeStmts = [];
        this.decodeStmts = [];
        super.visit(fields);
        const encodeMethod = `
    encode<__T>(encoder: __T): void {
      ${node.extendsType != null ? "super.encode<__T>(encoder);" : ""}
      ${this.encodeStmts.join(";\n\t")};
    }
    `;
        const decodeMethod = `
    decode<__T>(decoder: __T): void {
      ${node.extendsType != null ? "super.decode(decoder);" : ""}
      ${this.decodeStmts.join(";\n\t")};
    }
    `;
        if (!node.members.some(utils_1.isMethodNamed("encode"))) {
            const encodeMember = visitor_as_1.SimpleParser.parseClassMember(encodeMethod, node);
            node.members.push(encodeMember);
        }
        if (!node.members.some(utils_1.isMethodNamed("decode"))) {
            const decodeMember = visitor_as_1.SimpleParser.parseClassMember(decodeMethod, node);
            node.members.push(decodeMember);
        }
    }
    static visit(node) {
        (new MethodInjector()).visit(node);
    }
}
exports.MethodInjector = MethodInjector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0aG9kSW5qZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbWV0aG9kSW5qZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsc0NBQWtJO0FBQ2xJLDJDQUF1RDtBQUN2RCxpREFBeUU7QUFDekUsbUNBQWlDO0FBR2pDLFNBQVMsV0FBVyxDQUFDLElBQWM7SUFDakMsSUFBSSxLQUFLLEdBQUcsZUFBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQztJQUMzQixJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQzNDLEtBQUssR0FBRyxHQUFHLEtBQUssU0FBUyxDQUFDO0tBQzNCO0lBQ0QsT0FBTyxLQUFLLENBQUE7QUFDZCxDQUFDO0FBR0QsU0FBUyxPQUFPLENBQUMsSUFBMEI7SUFDekMsT0FBTyxJQUFJLENBQUMsSUFBSSxJQUFJLGFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQztBQUNoRCxDQUFDO0FBRUQsU0FBUyxlQUFlLENBQUMsSUFBMEI7SUFDakQsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3hELENBQUM7QUFFRCxNQUFhLGNBQWUsU0FBUSx3QkFBVztJQUs3QyxxQkFBcUIsQ0FBQyxJQUFzQjtRQUMxQyxNQUFNLElBQUksR0FBRyxnQkFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsU0FBUyxJQUFJLHVDQUF1QyxnQkFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDcEc7UUFFRCxNQUFNLEtBQUssR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXJDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLHdCQUF3QixLQUFLLE1BQU0sSUFBSSxXQUFXLElBQUksR0FBRyxDQUFDLENBQUM7UUFFakYsSUFBSSxZQUFZLEdBQVcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxnQkFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDcEYsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLDJCQUEyQixLQUFLLE1BQU0sSUFBSSxJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7SUFDbkcsQ0FBQztJQUVELHFCQUFxQixDQUFDLElBQXNCO1FBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxlQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hDLElBQUksZ0JBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUFFLE9BQU87U0FBRTtRQUUvQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFFekIsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7UUFDdEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVwQixNQUFNLFlBQVksR0FBRzs7UUFFakIsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQzdELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQzs7S0FFakMsQ0FBQTtRQUNELE1BQU0sWUFBWSxHQUFHOztRQUVqQixJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDeEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDOztLQUVqQyxDQUFBO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLHFCQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRTtZQUMvQyxNQUFNLFlBQVksR0FBRyx5QkFBWSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN2RSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNqQztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxxQkFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUU7WUFDL0MsTUFBTSxZQUFZLEdBQUcseUJBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdkUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDakM7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUErQjtRQUMxQyxDQUFDLElBQUksY0FBYyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsQ0FBQztDQUVGO0FBM0RELHdDQTJEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGVOb2RlLCBDbGFzc0RlY2xhcmF0aW9uLCBTb3VyY2UsIEZpZWxkRGVjbGFyYXRpb24sIE5vZGVLaW5kLCBEZWNsYXJhdGlvblN0YXRlbWVudCwgQ29tbW9uRmxhZ3MgfSBmcm9tIFwidmlzaXRvci1hcy9hc1wiO1xuaW1wb3J0IHsgU2ltcGxlUGFyc2VyLCBCYXNlVmlzaXRvciB9IGZyb20gXCJ2aXNpdG9yLWFzXCI7XG5pbXBvcnQgeyB0b1N0cmluZywgaXNNZXRob2ROYW1lZCwgZ2V0TmFtZSB9IGZyb20gJ3Zpc2l0b3ItYXMvZGlzdC91dGlscyc7XG5pbXBvcnQge2lzU3RkbGlifSBmcm9tIFwiLi91dGlsc1wiO1xuXG5cbmZ1bmN0aW9uIGdldFR5cGVOYW1lKHR5cGU6IFR5cGVOb2RlKTogc3RyaW5nIHtcbiAgbGV0IF90eXBlID0gZ2V0TmFtZSh0eXBlKTtcbiAgY29uc3QgT1JfTlVMTCA9IC9cXHwuKm51bGwvO1xuICBpZiAodHlwZS5pc051bGxhYmxlICYmICFPUl9OVUxMLnRlc3QoX3R5cGUpKSB7XG4gICAgX3R5cGUgPSBgJHtfdHlwZX0gfCBudWxsYDtcbiAgfVxuICByZXR1cm4gX3R5cGVcbn1cblxuXG5mdW5jdGlvbiBpc0ZpZWxkKG5vZGU6IERlY2xhcmF0aW9uU3RhdGVtZW50KTogYm9vbGVhbiB7XG4gIHJldHVybiBub2RlLmtpbmQgPT0gTm9kZUtpbmQuRklFTERERUNMQVJBVElPTjtcbn1cblxuZnVuY3Rpb24gaXNJbnN0YW5jZUZpZWxkKG5vZGU6IERlY2xhcmF0aW9uU3RhdGVtZW50KTogYm9vbGVhbiB7XG4gIHJldHVybiBpc0ZpZWxkKG5vZGUpICYmIG5vZGUuaXMoQ29tbW9uRmxhZ3MuSU5TVEFOQ0UpO1xufVxuXG5leHBvcnQgY2xhc3MgTWV0aG9kSW5qZWN0b3IgZXh0ZW5kcyBCYXNlVmlzaXRvciB7XG4gIGVuY29kZVN0bXRzITogc3RyaW5nW107XG4gIGRlY29kZVN0bXRzITogc3RyaW5nW107XG4gIGN1cnJlbnRDbGFzcyE6IENsYXNzRGVjbGFyYXRpb247XG5cbiAgdmlzaXRGaWVsZERlY2xhcmF0aW9uKG5vZGU6IEZpZWxkRGVjbGFyYXRpb24pOiB2b2lkIHtcbiAgICBjb25zdCBuYW1lID0gdG9TdHJpbmcobm9kZS5uYW1lKTtcbiAgICBpZiAoIW5vZGUudHlwZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGaWVsZCAke25hbWV9IGlzIG1pc3NpbmcgYSB0eXBlIGRlY2xhcmF0aW9uICBmb3IgJHt0b1N0cmluZyh0aGlzLmN1cnJlbnRDbGFzcyl9YCk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IF90eXBlID0gZ2V0VHlwZU5hbWUobm9kZS50eXBlKTtcbiAgICBcbiAgICB0aGlzLmVuY29kZVN0bXRzLnB1c2goYGVuY29kZXIuZW5jb2RlX2ZpZWxkPCR7X3R5cGV9PihcIiR7bmFtZX1cIiwgdGhpcy4ke25hbWV9KWApO1xuICAgIFxuICAgIGxldCBkZWZhdWx0VmFsdWU6IHN0cmluZyA9IG5vZGUuaW5pdGlhbGl6ZXIgPyBgLCAke3RvU3RyaW5nKG5vZGUuaW5pdGlhbGl6ZXIpfWA6IFwiXCI7XG4gICAgdGhpcy5kZWNvZGVTdG10cy5wdXNoKGB0aGlzLiR7bmFtZX0gPSBkZWNvZGVyLmRlY29kZV9maWVsZDwke190eXBlfT4oXCIke25hbWV9XCIke2RlZmF1bHRWYWx1ZX0pYCk7XG4gIH1cblxuICB2aXNpdENsYXNzRGVjbGFyYXRpb24obm9kZTogQ2xhc3NEZWNsYXJhdGlvbik6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKGAke2dldE5hbWUobm9kZSl9YCk7XG4gICAgaWYgKGlzU3RkbGliKG5vZGUpKSB7IHJldHVybjsgfVxuXG4gICAgY29uc3QgZmllbGRzID0gbm9kZS5tZW1iZXJzLmZpbHRlcihpc0luc3RhbmNlRmllbGQpO1xuICAgIGlmICghZmllbGRzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuY3VycmVudENsYXNzID0gbm9kZTtcblxuICAgIHRoaXMuZW5jb2RlU3RtdHMgPSBbXTtcbiAgICB0aGlzLmRlY29kZVN0bXRzID0gW107XG4gICAgc3VwZXIudmlzaXQoZmllbGRzKTtcblxuICAgIGNvbnN0IGVuY29kZU1ldGhvZCA9IGBcbiAgICBlbmNvZGU8X19UPihlbmNvZGVyOiBfX1QpOiB2b2lkIHtcbiAgICAgICR7bm9kZS5leHRlbmRzVHlwZSAhPSBudWxsID8gXCJzdXBlci5lbmNvZGU8X19UPihlbmNvZGVyKTtcIiA6IFwiXCJ9XG4gICAgICAke3RoaXMuZW5jb2RlU3RtdHMuam9pbihcIjtcXG5cXHRcIil9O1xuICAgIH1cbiAgICBgXG4gICAgY29uc3QgZGVjb2RlTWV0aG9kID0gYFxuICAgIGRlY29kZTxfX1Q+KGRlY29kZXI6IF9fVCk6IHZvaWQge1xuICAgICAgJHtub2RlLmV4dGVuZHNUeXBlICE9IG51bGwgPyBcInN1cGVyLmRlY29kZShkZWNvZGVyKTtcIiA6IFwiXCJ9XG4gICAgICAke3RoaXMuZGVjb2RlU3RtdHMuam9pbihcIjtcXG5cXHRcIil9O1xuICAgIH1cbiAgICBgXG4gICAgaWYgKCFub2RlLm1lbWJlcnMuc29tZShpc01ldGhvZE5hbWVkKFwiZW5jb2RlXCIpKSkgeyBcbiAgICAgIGNvbnN0IGVuY29kZU1lbWJlciA9IFNpbXBsZVBhcnNlci5wYXJzZUNsYXNzTWVtYmVyKGVuY29kZU1ldGhvZCwgbm9kZSk7XG4gICAgICBub2RlLm1lbWJlcnMucHVzaChlbmNvZGVNZW1iZXIpO1xuICAgIH1cbiAgICBpZiAoIW5vZGUubWVtYmVycy5zb21lKGlzTWV0aG9kTmFtZWQoXCJkZWNvZGVcIikpKSB7IFxuICAgICAgY29uc3QgZGVjb2RlTWVtYmVyID0gU2ltcGxlUGFyc2VyLnBhcnNlQ2xhc3NNZW1iZXIoZGVjb2RlTWV0aG9kLCBub2RlKTtcbiAgICAgIG5vZGUubWVtYmVycy5wdXNoKGRlY29kZU1lbWJlcik7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHZpc2l0KG5vZGU6IENsYXNzRGVjbGFyYXRpb24gfCBTb3VyY2UpOiB2b2lkIHtcbiAgICAobmV3IE1ldGhvZEluamVjdG9yKCkpLnZpc2l0KG5vZGUpO1xuICB9XG5cbn1cbiJdfQ==